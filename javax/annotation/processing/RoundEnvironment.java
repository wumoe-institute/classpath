/* RoundEnvironment.java -- Represents a round of annotation processing.
   Copyright (C) 2012  Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package javax.annotation.processing;

import java.lang.annotation.Annotation;

import java.util.Set;

import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;

/**
 * Provides information used in a round of annotation processing.
 * Annotation processing frameworks should provide an implementation
 * of this interface, so that processors can be supplied with an instance
 * in order to query information about their environment.
 *
 * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
 * @since 1.6
 */
public interface RoundEnvironment
{

  /**
   * Returns true if the previous round of annotation processing
   * raised an error.
   *
   * @return true if the previous round raised an error.
   */
  boolean errorRaised();

  /**
   * Returns the elements annotated with the given annotation type.
   * Only the package and type elements, and their constituent
   * member, parameter and type parameter elements, included in this
   * round of annotation processing are returned.  Both root type
   * elements and any member type elements nested within them are
   * included.  The annotation may be used directly or inherited
   * by another annotation.  Elements in a package are not included
   * simply because a package-info file was generated.
   *
   * @param annotation the annotation type requested.
   * @return the elements annotated with the given annotation type
   *         or an empty set if none were found.
   * @throws IllegalArgumentException if @code{annotation} does not
   *                                  represent an annotation type.
   */
  Set<? extends Element> getElementsAnnotatedWith(Class <? extends Annotation> annotation);

  /**
   * Returns the elements annotated with the given annotation type.
   * Only the package and type elements, and their constituent
   * member, parameter and type parameter elements, included in this
   * round of annotation processing are returned.  Both root type
   * elements and any member type elements nested within them are
   * included.  The annotation may be used directly or inherited
   * by another annotation.  Elements in a package are not included
   * simply because a package-info file was generated.
   *
   * @param annotation the annotation type requested.
   * @return the elements annotated with the given annotation type
   *         or an empty set if none were found.
   * @throws IllegalArgumentException if @code{annotation} does not
   *                                  represent an annotation type.
   */
  Set<? extends Element> getElementsAnnotatedWith(TypeElement annotation);

  /**
   * Returns the root elements generated by the previous round of
   * annotation processing.
   *
   * @return the elements generated by the previous round or an
   *         empty set if none were generated.
   */
  Set<? extends Element> getRootElements();

  /**
   * Returns true if there will not be another round of processing
   * on the elements generated by this round.
   *
   * @return true if the generated types will not be further processed.
   */
  boolean processingOver();

}
